// Prisma schema for RestOrFeed app
// Provider: SQLite (simple, file-based, good for local dev)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  price       Float
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  customizable Boolean @default(false)
  status      Boolean  @default(true)
  image       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderItems  OrderItem[]
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  icon     String?
  products Product[]
}

model Order {
  id        Int         @id @default(autoincrement())
  items     OrderItem[]
  client    String?
  table     String?
  status    String      @default("En cours")
  isArchived Boolean   @default(false)
  createdAt DateTime    @default(now())
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   Int
  product   Product  @relation(fields: [productId], references: [id])
  productId Int
  quantity  Int      @default(1)
  price     Float
}

model User {
  id        Int        @id @default(autoincrement())
  clerkId   String     @unique
  email     String     @unique
  username  String?
  password  String?
  role      String     @default("user")
  createdAt DateTime   @default(now())
  
  // Relations
  employee              Employee?  // Relation one-to-one optionnelle
  conversationParticipants ConversationParticipant[]
  messages              Message[]
}

model Employee {
  id                    Int       @id @default(autoincrement())
  name                  String
  avatar                String?
  contact               String?
  userId                Int?      @unique // Relation vers User
  user                  User?     @relation(fields: [userId], references: [id])
  dateOfBirth           DateTime?
  address               String?
  socialSecurityNumber  String?
  hireDate              DateTime?
  fireDate              DateTime?
  contractType          String?   // "essai", "stage", "CDD", "CDI", etc.
  salary                Float?
  status                String    @default("Active") // "Active", "Inactive", "Fired", etc.
  notes                 String?
  assignedTables        String?   // JSON array stored as string
  location              String?
  availability          String    @default("Available")
  schedule              String?
  role                  String
  createdAt             DateTime  @default(now())
}

// === CHAT SYSTEM MODELS ===
model Conversation {
  id            Int                        @id @default(autoincrement())
  name          String?                    // Nom pour les conversations privées/groupes
  type          String                     @default("general") // "general", "support", "private", "group"
  isActive      Boolean                    @default(true)
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  
  // Relations
  participants  ConversationParticipant[]
  messages      Message[]
}

model ConversationParticipant {
  id             Int          @id @default(autoincrement())
  conversationId Int
  userId         Int
  joinedAt       DateTime     @default(now())
  lastReadAt     DateTime?    // Dernière fois que l'utilisateur a lu les messages
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([conversationId, userId]) // Un user ne peut être qu'une fois dans une conversation
}

model Message {
  id             Int          @id @default(autoincrement())
  content        String
  conversationId Int
  authorId       Int
  isRead         Boolean      @default(false)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  
  // Relations
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  author         User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
}
