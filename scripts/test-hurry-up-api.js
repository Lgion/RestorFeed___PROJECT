// Script pour tester l'API help-request avec des donn√©es similaires √† celles du frontend
const fetch = require('node-fetch');

async function testHurryUpAPI() {
  console.log('üß™ Test de l\'API Hurry Up via HTTP');
  console.log('==================================\n');

  const testData = {
    tableId: '6',
    orderId: 33, // Nombre comme dans l'erreur originale
    type: 'HURRY_UP',
    message: 'üöÄ URGENT: Acc√©l√©rer la commande ##1 - Table 6',
    priority: 'URGENT'
  };

  console.log('Donn√©es envoy√©es:', testData);

  try {
    const response = await fetch('http://localhost:3000/api/help-request', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testData)
    });

    console.log('Status:', response.status);
    
    const result = await response.json();
    console.log('R√©ponse:', result);

    if (response.ok) {
      console.log('‚úÖ Test r√©ussi ! Demande cr√©√©e avec ID:', result.id);
    } else {
      console.log('‚ùå Test √©chou√©:', result.message);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error.message);
  }
}

// V√©rifier si le serveur est en cours d'ex√©cution
async function checkServer() {
  try {
    const response = await fetch('http://localhost:3000/api/help-requests');
    return response.ok;
  } catch (error) {
    return false;
  }
}

async function main() {
  const serverRunning = await checkServer();
  
  if (!serverRunning) {
    console.log('‚ùå Serveur non accessible sur http://localhost:3000');
    console.log('üí° Assurez-vous que le serveur est d√©marr√© avec: npm run dev');
    return;
  }

  await testHurryUpAPI();
}

main();
